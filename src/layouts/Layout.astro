---
import Navbar from "./Navbar.astro";
import Footer from "./Footer.astro";
import PrivacyPolicy from "../components/sections/PrivacyPolicy.astro";
import Terms from "../components/sections/Terms.astro";

export interface Props {
  title: string;
  showNavbar?: boolean;
}

const { title, showNavbar = true } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta
      name="description"
      content="KUARU STUDIO - Under Construction -"
    />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Work+Sans:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/style/custom.css" />
  </head>
  <body class="overflow-x-hidden overflow-y-auto bg-[#f4f4f4]">
    {showNavbar && <Navbar />}
    <main class="transition-opacity duration-500">
    <slot />
    </main>
    <PrivacyPolicy />
    <Terms />
    <Footer />
  </body>
</html>

  <script>
  interface SmoothScrollOptions {
    duration: number;
    easing: (t: number) => number;
  }

  const smoothScroll = (targetId: string, options: SmoothScrollOptions) => {
    const targetElement = document.getElementById(targetId);
    if (!targetElement) return;

    const startPosition = window.scrollY;
    const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY;
    const distance = targetPosition - startPosition;
    let start: number | null = null;

    const animation = (timestamp: number) => {
      if (!start) start = timestamp;
      const progress = timestamp - start;
      const percentage = Math.min(progress / options.duration, 1);
      const easePercentage = options.easing(percentage);

      window.scrollTo(0, startPosition + distance * easePercentage);

      if (progress < options.duration) {
        window.requestAnimationFrame(animation);
    }
    };

    window.requestAnimationFrame(animation);
  };

  document.addEventListener('DOMContentLoaded', () => {
    const links = document.querySelectorAll('a[href^="#"]');
    links.forEach(link => {
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const href = this.getAttribute('href');
        if (href) {
          const targetId = href.substring(1);
          smoothScroll(targetId, {
            duration: 1000,
            easing: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t
          });
        }
      });
    });
  });
</script>

<style is:global>
  :root {
    --font-sans: 'M PLUS Rounded 1c', sans-serif;
    --font-heading: 'Zen Kaku Gothic New', sans-serif;
    --font-noto-jp: 'Noto Sans JP', sans-serif;
        }

  body {
    font-family: var(--font-sans);
  }

  h1, h2, h3 {
    font-family: var(--font-heading);
  }

  /* Add transition effect styles */
  #privacy-policy, #terms {
    opacity: 0;
    transition: opacity 0.5s ease;
  }

  main {
    opacity: 1;
    transition: opacity 0.5s ease;
    }
</style>
