---
import Container from "../components/shared/Container.astro";
import Navitem from "../components/shared/Navitem.astro";
import BtnLink from "../components/shared/BtnLink.astro";
import { Image } from "astro:assets";
import kuaruLogo from "../assets/logos/kuaru-logo-2.png";

const navItems = [
  {
    href: "#hero",
    text: "HOME",
  },
  {
    href: "#about",
    text: "ABOUT",
  },
  {
    href: "#brands",
    text: "BRANDS",
  },
  {
    href: "#philosophy",
    text: "PHILOSOPHY",
  },
];
---

<header class="fixed inset-x-0 top-0 z-50 py-1 bg-transparent transition-colors duration-300 shadow-lg shadow-black/10" id="header">
  <Container>
    <nav class="w-full flex justify-between items-center gap-6 relative">
      <!-- logo -->
      <div class="min-w-max inline-flex relative lg:w-1/4">
        <a href="#hero" class="relative flex items-center gap-3 pointer-events-none" id="logo-link">
          <div class="flex items-center gap-4">
            <Image
              src={kuaruLogo}
              alt="KUARU STUDIO Logo"
              class="h-10 w-auto opacity-0 transition-opacity duration-300 ease-in-out"
              id="logo-image"
            />
            <div class="font-bold text-3xl leading-none font-work-sans text-transparent select-none transition-colors duration-300 ease-in-out" id="logo-text">
              KUARU STUDIOS
            </div>
          </div>
        </a>
      </div>

      <!-- navigation menu -->
      <div
        data-navbar
        class="flex opacity-0 invisible lg:opacity-100 lg:visible lg:!h-auto duration-300 ease-linear flex-col gap-y-6 gap-x-4 lg:flex-row w-full lg:w-2/4 lg:justify-center lg:items-center fixed lg:static top-[48px] lg:top-0 inset-x-0 lg:inset-x-auto bg-[#4c5c68] lg:bg-transparent transition-all duration-300"
      >
        <ul
          class="px-6 lg:px-0 pt-6 lg:pt-0 pb-6 lg:pb-0 flex flex-col lg:flex-row gap-y-1 gap-x-3 text-lg text-[#f4f4f4] w-full lg:w-auto lg:justify-center lg:items-center transition-colors duration-300 font-['Zen_Kaku_Gothic_New',sans-serif]"
        >
          {
            navItems.map((item, index) => {
              return (
                <li class="w-full lg:w-auto">
                  <Navitem {...item} isLast={index === navItems.length - 1} />
                  {index !== navItems.length - 1 && (
                    <div class="h-px w-full bg-[#f4f4f4]/30 my-1 lg:hidden"></div>
                  )}
                </li>
              );
            })
          }
        </ul>
      </div>

      <!-- hamburger menu button -->
      <div class="min-w-max flex items-center gap-x-3 lg:w-1/4 lg:justify-end">
        <button
          data-toggle-nav
          data-open-nav="false"
          class="lg:hidden lg:invisible outline-none w-7 h-auto flex flex-col relative"
        >
          <span
            id="line1"
            class="w-6 h-0.5 rounded-full bg-[#f4f4f4] transition-all duration-300 ease-linear"
          ></span>
          <span
            id="line2"
            class="w-6 origin-center mt-1 h-0.5 rounded-ful bg-[#f4f4f4] transition-all duration-300 ease-linear"
          ></span>
          <span
            id="line3"
            class="w-6 mt-1 h-0.5 rounded-ful bg-[#f4f4f4] transition-all duration-300 ease-linear"
          ></span>
          <span class="sr-only">togglenav</span>
        </button>
      </div>
    </nav>
  </Container>
</header>

<!-- 遮罩層 -->
<div id="overlay" class="fixed top-[48px] inset-x-0 bottom-0 bg-black/50 opacity-0 invisible transition-opacity duration-300 z-40 lg:hidden"></div>

<script>
  const toggleNav = document.querySelector('[data-toggle-nav]') as HTMLElement | null;
  const navbar = document.querySelector('[data-navbar]') as HTMLElement | null;
  const header = document.getElementById('header') as HTMLElement | null;
  const logoText = document.getElementById('logo-text') as HTMLElement | null;
  const logoLink = document.getElementById('logo-link') as HTMLElement | null;
  const logoImage = document.getElementById('logo-image') as HTMLElement | null;
  const overlay = document.getElementById('overlay') as HTMLElement | null;
  let timeoutId: number | null = null;
  let isPrivacyPage = false;

  // 定義區塊映射
  const sectionMap = {
    '#hero': 'hero',
    '#about': 'about-section',
    '#brands': 'brands-section',
    '#philosophy': 'philosophy-section',
    '#footer': 'footer'
  };

  // 平滑滾動到指定區塊
  function scrollToSection(sectionId: string) {
    const element = document.querySelector(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
    }
  }

  // 更新 URL 並滾動到區塊
  function navigateToSection(sectionId: string, updateHistory = true) {
    if (updateHistory) {
      window.history.pushState({ section: sectionId }, '', sectionId);
    }
    scrollToSection(sectionId);
  }

  // 處理瀏覽器前進/後退
  function handlePopState(event: PopStateEvent) {
    const currentHash = window.location.hash || '#hero';
    navigateToSection(currentHash, false);
  }

  // 初始化：檢查 URL hash 並滾動到對應區塊
  function initializeNavigation() {
    const currentHash = window.location.hash || '#hero';
    if (currentHash !== '#hero') {
      // 延遲滾動，確保頁面完全加載
      setTimeout(() => {
        scrollToSection(currentHash);
      }, 100);
    }
  }

  // 監聽隱私政策頁面狀態變化
  window.addEventListener('privacyPageStateChange', (e: Event) => {
    const customEvent = e as CustomEvent;
    isPrivacyPage = customEvent.detail.isPrivacyPage;
    if (isPrivacyPage) {
      // 在隱私政策頁面時強制顯示 header 和 logo
      if (header) {
        header.classList.add('bg-[#4c5c68]');
        header.classList.remove('bg-transparent');
      }
      if (logoText) {
        logoText.classList.remove('text-transparent');
        logoText.classList.add('text-[#f4f4f4]');
      }
      if (logoImage) {
        logoImage.classList.remove('opacity-0');
        logoImage.classList.add('opacity-100');
      }
      if (logoLink) {
        logoLink.classList.remove('pointer-events-none');
        // 修改 logo 鏈接
        logoLink.setAttribute('href', '/#hero');
      }
    } else {
      // 返回主頁時恢復滾動效果
      handleScroll();
    }
  });

  // 為 Logo 點擊添加事件處理
  if (logoLink) {
    logoLink.addEventListener('click', (e) => {
      if (isPrivacyPage) {
        e.preventDefault();
        // 使用淡出淡入效果返回主頁面
        const mainContent = document.querySelector('main');
        const privacySection = document.getElementById('privacy-policy');
        const termsSection = document.getElementById('terms');
        
        if (window.switchToPage && mainContent) {
          // 確定當前在哪個頁面，隱藏對應的區塊
          const hideSections = [];
          if (privacySection && privacySection.style.display !== 'none') {
            hideSections.push(privacySection);
          }
          if (termsSection && termsSection.style.display !== 'none') {
            hideSections.push(termsSection);
          }
          
          // 先淡出當前頁面，然後淡入主頁面
          window.switchToPage(mainContent, hideSections);
          window.scrollTo({ top: 0, behavior: 'smooth' });
          window.history.pushState({}, '', '/');
          window.dispatchEvent(new CustomEvent('privacyPageStateChange', { detail: { isPrivacyPage: false } }));
        }
      } else {
        // 在主頁面時，使用 History API 導航到 hero 區塊
        e.preventDefault();
        navigateToSection('#hero');
      }
    });
  }

  // 修改所有導航鏈接
  const navLinks = document.querySelectorAll('a[href^="#"]');
  navLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      const href = link.getAttribute('href');
      // 檢查是否是 Footer 中的 Privacy 或 Terms 鏈接
      const isFooterLink = (href === '#privacy-policy' || href === '#terms');
      
      // 只在 Privacy 或 Terms 頁面時攔截非 Footer 的連結
      if (href && isPrivacyPage && !isFooterLink) {
        e.preventDefault();
        // 先跳轉到主頁
        window.location.href = '/';
        // 使用 sessionStorage 存儲目標區塊
        sessionStorage.setItem('targetSection', href);
      } else if (href && !isPrivacyPage && !isFooterLink) {
        // 在主頁面時，使用 History API 導航
        e.preventDefault();
        navigateToSection(href);
      }

      /* ---------- 點擊後自動關閉行動版導覽 ---------- */
      const isMobile = window.matchMedia('(max-width: 1023px)').matches; // lg 以下
      const linkInsideNavbar = link.closest('[data-navbar]');
      if (isMobile && linkInsideNavbar && toggleNav && navbar) {
        // 關閉漢堡菜單狀態
        toggleNav.setAttribute('data-open-nav', 'false');
        // 收起導覽容器
        navbar.classList.remove('opacity-100', 'visible', '!h-auto');
        navbar.classList.add('opacity-0', 'invisible', '!h-0');
        // 隱藏遮罩層
        if (overlay) {
          overlay.classList.remove('opacity-100', 'visible');
          overlay.classList.add('opacity-0', 'invisible');
        }
      }
      // 對於 Footer 的 Privacy 或 Terms 連結，讓它們正常工作
    });
  });

  // 檢查是否需要滾動到特定區塊
  window.addEventListener('load', () => {
    const targetSection = sessionStorage.getItem('targetSection');
    if (targetSection) {
      const element = document.querySelector(targetSection);
      if (element) {
        element.scrollIntoView({ behavior: 'smooth' });
      }
      sessionStorage.removeItem('targetSection');
    } else {
      // 初始化導航
      initializeNavigation();
    }
  });

  // 監聽瀏覽器前進/後退事件
  window.addEventListener('popstate', handlePopState);

  // 處理滾動效果
  function handleScroll() {
    if (!header) return;
    if (window.scrollY > 50) {
      header.classList.add('bg-[#4c5c68]');
      header.classList.remove('bg-transparent');
      // Update logo text color
      if (logoText) {
        logoText.classList.remove('text-transparent');
        logoText.classList.add('text-[#f4f4f4]');
      }
      // Show logo image
      if (logoImage) {
        logoImage.classList.remove('opacity-0');
        logoImage.classList.add('opacity-100');
      }
      // Enable logo link clicks
      if (logoLink) {
        logoLink.classList.remove('pointer-events-none');
      }
    } else {
      header.classList.remove('bg-[#4c5c68]');
      header.classList.add('bg-transparent');
      // Restore logo text color
      if (logoText) {
        logoText.classList.remove('text-[#f4f4f4]');
        logoText.classList.add('text-transparent');
      }
      // Hide logo image
      if (logoImage) {
        logoImage.classList.remove('opacity-100');
        logoImage.classList.add('opacity-0');
      }
      // Disable logo link clicks
      if (logoLink) {
        logoLink.classList.add('pointer-events-none');
      }
      // 確保滾動到頂時關閉光暈
      removeLogoGlow();
    }
  }

  // Scroll event listener
  if (header) {
    window.addEventListener('scroll', () => {
      if (!isPrivacyPage) {
        handleScroll();
      }
    });
  }

  // 漢堡菜單切換
  if (toggleNav) {
    toggleNav.addEventListener("click", () => {
      const isOpen = toggleNav.getAttribute("data-open-nav") === "true";
      toggleNav.setAttribute("data-open-nav", (!isOpen).toString());
      
      if (navbar) {
        if (!isOpen) {
          navbar.classList.add("opacity-100", "visible", "!h-auto");
          navbar.classList.remove("opacity-0", "invisible", "!h-0");
        } else {
          navbar.classList.remove("opacity-100", "visible", "!h-auto");
          navbar.classList.add("opacity-0", "invisible", "!h-0");
        }
      }
      
      if (overlay) {
        if (!isOpen) {
          overlay.classList.add("opacity-100", "visible");
          overlay.classList.remove("opacity-0", "invisible");
        } else {
          overlay.classList.remove("opacity-100", "visible");
          overlay.classList.add("opacity-0", "invisible");
        }
      }
    });
  }

  // 點擊遮罩層關閉菜單
  if (overlay) {
    overlay.addEventListener("click", () => {
      if (toggleNav) {
        toggleNav.setAttribute("data-open-nav", "false");
      }
      if (navbar) {
        navbar.classList.remove("opacity-100", "visible", "!h-auto");
        navbar.classList.add("opacity-0", "invisible", "!h-0");
      }
      overlay.classList.remove("opacity-100", "visible");
      overlay.classList.add("opacity-0", "invisible");
    });
  }

  /* ----------------------------
   * Scroll-Spy：自動高亮導航連結
   * ---------------------------*/
  document.addEventListener('DOMContentLoaded', () => {
    // 只關注出現在導覽列中的錨點連結
    const menuLinks = document.querySelectorAll('[data-navbar] a[href^="#"]');
    if (!menuLinks.length) return;

    // 對應要監聽的 section element
    const observedSections: HTMLElement[] = [];
    menuLinks.forEach(link => {
      const href = link.getAttribute('href');
      if (href) {
        const sectionEl = document.querySelector(href) as HTMLElement | null;
        if (sectionEl) {
          observedSections.push(sectionEl);
        }
      }
    });

    // 若無 section 則略過
    if (!observedSections.length) return;

    let currentActiveId: string | null = null;

    function applyHighlight(el: Element) {
      el.classList.add('text-[#8e735b]');
      el.classList.remove('text-[#f4f4f4]');
      (el as HTMLElement).style.textShadow = '0 0 3px #f4f4f0';
      (el as HTMLElement).style.setProperty('-webkit-text-stroke', '1px #8e735b');
      (el as HTMLElement).style.setProperty('text-stroke', '1px #8e735b');
    }

    function removeHighlight(el: Element) {
      el.classList.remove('text-[#8e735b]');
      (el as HTMLElement).style.textShadow = 'none';
      (el as HTMLElement).style.removeProperty('-webkit-text-stroke');
      (el as HTMLElement).style.removeProperty('text-stroke');
      if (!el.classList.contains('text-[#f4f4f4]')) {
        el.classList.add('text-[#f4f4f4]');
      }
    }

    function setActiveLink(targetId: string | null) {
      menuLinks.forEach(link => {
        const href = link.getAttribute('href');
        if (href === targetId) {
          applyHighlight(link);
        } else {
          removeHighlight(link);
        }
      });
      currentActiveId = targetId;
    }

    const io = new IntersectionObserver((entries) => {
      if (isPrivacyPage) return; // 在 Privacy/Terms 頁面停用

      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const id = `#${entry.target.id}`;
          setActiveLink(id);
        }
      });
    }, {
      // 使 section 中線進入視窗時即觸發
      rootMargin: '-50% 0px -50% 0px',
      threshold: 0.0,
    });

    observedSections.forEach(sec => io.observe(sec));

    // 當切換到隱私政策頁面時，移除任何 active 樣式
    window.addEventListener('privacyPageStateChange', (e: Event) => {
      const customEvent = e as CustomEvent;
      if (customEvent.detail.isPrivacyPage) {
        setActiveLink(null);
      }
    });

    /* --------------- Hover 效果 -------------- */
    menuLinks.forEach(link => {
      link.addEventListener('mouseenter', () => {
        applyHighlight(link);
      });

      link.addEventListener('mouseleave', () => {
        const href = link.getAttribute('href');
        if (href !== currentActiveId) {
          removeHighlight(link);
        }
      });
    });

    /* --------------- 頁面底部偵測，專為 Footer 高亮 -------------- */
    window.addEventListener('scroll', () => {
      if (isPrivacyPage) return;
      // 如果已在 Contact 高亮就不用再次計算
      const nearBottom = (window.innerHeight + window.scrollY) >= (document.body.offsetHeight - 4);
      if (nearBottom) {
        setActiveLink('#footer');
      }
    });
  });

  // Logo 光暈效果
  function addLogoGlow() {
    if (logoText) {
      logoText.style.textShadow = '0 0 3px #f4f4f0';
      logoText.style.setProperty('-webkit-text-stroke', '0.1px #f4f4f4');
      logoText.style.setProperty('text-stroke', '0.1px #f4f4f4');
      logoText.style.transition = 'text-shadow 0.4s ease';
    }
    if (logoImage) {
      logoImage.style.filter = 'drop-shadow(0 0 1px #f4f4f4)';
      logoImage.style.transition = 'filter 0.4s ease';
    }
  }

  function removeLogoGlow() {
    if (logoText) {
      logoText.style.textShadow = 'none';
      logoText.style.removeProperty('-webkit-text-stroke');
      logoText.style.removeProperty('text-stroke');
    }
    if (logoImage) {
      logoImage.style.filter = 'none';
    }
  }

  // --------------- Logo Hover 觸發光暈 ---------------
  if (logoLink) {
    logoLink.addEventListener('mouseenter', () => {
      addLogoGlow();
    });
    logoLink.addEventListener('mouseleave', () => {
      removeLogoGlow();
    });
  }
</script>

<style is:global>
  /* 導覽列連結光暈淡入淡出 */
  [data-navbar] a {
    transition: color 0.4s ease, text-shadow 0.4s ease;
  }
</style>
