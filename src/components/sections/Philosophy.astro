---
import { philosophy } from "../../utils/data";
import type { PhilosophyProps } from "../../utils/data";
import Title from "../shared/Title.astro";

interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<section id="philosophy" class="scroll-section min-h-[100vh] py-16 md:py-20">
  <div class="container mx-auto px-4">
    <div class="text-center mt-4 mb-12 md:mb-16 opacity-0 translate-y-6 transition duration-700" data-scrollfade>
      <Title className="">OUR PHILOSOPHY</Title>
      <p class="mt-8 mb-12 text-center text-base font-light leading-relaxed text-gray-600 max-w-4xl mx-auto text-[#545454]">
        <em>Beyond products, this is the mindset that guides every step.</em>
      </p>
      <p class="text-center text-lg md:text-xl leading-relaxed font-light mt-12 mb-12 text-[#8e735b]">
        Calm. Considered. Crafted.
      </p>
      <div class="h-1"></div>
    </div>
    <div class="flex flex-col gap-12 md:gap-16">
      {
        philosophy.map((item: PhilosophyProps, index: number) => (
          <div class="flex flex-col md:flex-row gap-8 md:gap-12 items-center opacity-0 translate-y-6 transition duration-700" data-scrollfade>
            <div class="w-full md:w-1/2 flex flex-col gap-4">
              <h3 class="text-xl md:text-2xl font-semibold mb-2">{item.title}</h3>
              <div class="space-y-4">
                <p class="tracking-wide">{item.kuaruPhilosophy1}</p>
                <p class="tracking-wide">{item.kuaruPhilosophy2}</p>
              </div>
            </div>
            <div class="w-full md:w-1/2">
              <img
                src={item.img.src}
                alt={item.title}
                class="w-full md:max-w-lg h-auto rounded-xl object-cover"
              />
            </div>
          </div>
        ))
      }
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const fadeEls = document.querySelectorAll('[data-scrollfade]');
    if (!fadeEls.length) return;

    const io = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        const el = entry.target as HTMLElement;
        if (entry.isIntersecting) {
          el.classList.remove('opacity-0', 'translate-y-6');
        } else {
          el.classList.add('opacity-0', 'translate-y-6');
        }
      });
    }, {
      rootMargin: '-25% 0px -25% 0px',
      threshold: 0,
    });

    fadeEls.forEach(el => io.observe(el));
  });
</script>
