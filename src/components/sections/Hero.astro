---
import { Image } from "astro:assets";
import Button from "../shared/Button.astro";
import Container from "../shared/Container.astro";
import Paragraph from "../shared/Paragraph.astro";

import myHeroImage1 from "../../assets/images/hero1.jpg";
import myHeroImage2 from "../../assets/images/hero2.jpg";
import myHeroImage3 from "../../assets/images/hero3.jpg";
import kuaruLogo from "../../assets/logos/kuaru-logo.png";
import CtaButton from "../shared/CtaButton.astro";
import ByResult from "./ByResult.astro";
import GradiantText from "../shared/GradiantText.astro";

export interface Props {
  className?: string;
}

const { className } = Astro.props;
---

<section id="hero-section" class=`relative min-h-[200vh] pt-32 lg:pt-36 bg-[#4c5c68] ${className} pb-0`>
  <Container className={"flex flex-col items-center justify-center min-h-screen"}>
    <div
      class="relative flex flex-col items-center text-center w-full transition-transform duration-300 -mt-[25vh]"
      id="hero-content"
    >
      <div class="w-full max-w-[70%] sm:max-w-[60%] md:max-w-[50%] lg:max-w-[40%] xl:max-w-[40%] transition-transform duration-300">
        <Image
          src={kuaruLogo}
          alt="KUARU STUDIO Logo"
          class="w-full h-auto"
          id="hero-logo"
        />
        </div>
      <div class="mt-4 text-[#f4f4f4] font-work-sans font-bold" id="hero-text-logo">
         KUARU STUDIOS
      </div>
      <Paragraph className="mt-[4vh] text-[2.5vw] font-light font-[var(--font-sans)] text-[#f4f4f4] tracking-[0.5em] transition-transform duration-300">
        &nbsp;Rooted in Quality. Elegance in Simplicity.
      </Paragraph>
    </div>
  </Container>
</section>

<script>
  const heroSection = document.getElementById('hero-section');
  const heroContent = document.getElementById('hero-content');
  const aboutSection = document.getElementById('about-section');
  
  function updateBackgroundColor() {
    const scrollPosition = window.scrollY;
    const heroHeight = heroSection.offsetHeight;
    const logoElement = heroSection.querySelector('img');
    const logoHeight = logoElement ? logoElement.offsetHeight : 0;
    const logoTop = logoElement ? logoElement.getBoundingClientRect().top + window.scrollY : 0;
    const logoMidPoint = logoTop + (logoHeight / 2);
    
    // 获取 About Us 区块的位置
    const aboutSectionTop = aboutSection ? aboutSection.getBoundingClientRect().top + window.scrollY : heroHeight;
    const windowHeight = window.innerHeight;
    const aboutSectionTrigger = aboutSectionTop - windowHeight; // 视窗底部到达 About Us 的位置
    
    // 计算背景色变化的滚动进度
    const bgScrollProgress = Math.max(0, Math.min((scrollPosition - logoMidPoint) / (aboutSectionTrigger - logoMidPoint), 1));
    
    // 计算动画的滚动进度（从 Logo 中点开始）
    const animationEndPoint = logoMidPoint + (aboutSectionTrigger - logoMidPoint) * 0.7; // 在到达 About Us 之前结束动画
    const animationProgress = Math.max(0, Math.min((scrollPosition - logoMidPoint) / (animationEndPoint - logoMidPoint), 1));
    
    // 计算颜色渐变
    const startColor = [76, 92, 104]; // #4c5c68
    const endColor = [250, 249, 245]; // #FAF9F5
    
    const currentColor = startColor.map((start, index) => {
      const end = endColor[index];
      return Math.round(start + (end - start) * bgScrollProgress);
    });
    
    // 应用颜色到 hero section
    heroSection.style.backgroundColor = `rgb(${currentColor.join(',')})`;
    
    // 同时更新文字颜色
    const textElements = heroSection.querySelectorAll('p, h1, h2, h3, h4, h5, h6');
    const textColor = bgScrollProgress > 0.5 ? '#2C2C2C' : '#f4f4f4';
    textElements.forEach(element => {
      element.style.color = textColor;
    });

    // 添加上移消逝动画
    if (heroContent) {
      const translateY = -animationProgress * 300; // 最大上移 300px
      const opacity = 1 - animationProgress; // 从 1 渐变到 0
      heroContent.style.transform = `translateY(${translateY}px)`;
      heroContent.style.opacity = opacity.toString();
    }
  }

  function setHeroTextLogoSize() {
    const heroLogo = document.getElementById('hero-logo');
    const heroTextLogo = document.getElementById('hero-text-logo');
    if (heroLogo && heroTextLogo) {
      // 确保图片加载完成以获取正确高度
      if (heroLogo.complete) {
        const logoHeight = heroLogo.offsetHeight;
        heroTextLogo.style.fontSize = `${logoHeight / 5}px`;
      } else {
        heroLogo.onload = () => {
          const logoHeight = heroLogo.offsetHeight;
          heroTextLogo.style.fontSize = `${logoHeight / 5}px`;
        };
      }
    }
  }

  // 监听滚动事件
  window.addEventListener('scroll', updateBackgroundColor);
  // 监听窗口大小调整事件
  window.addEventListener('resize', () => {
    updateBackgroundColor();
    setHeroTextLogoSize();
  });
  // 初始化颜色和字体大小
  updateBackgroundColor();
  setHeroTextLogoSize();
</script>
