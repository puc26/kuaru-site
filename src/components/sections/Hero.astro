---
import { Image } from "astro:assets";
import Button from "../shared/Button.astro";
import Container from "../shared/Container.astro";
import Paragraph from "../shared/Paragraph.astro";

import myHeroImage1 from "../../assets/images/hero1.jpg";
import myHeroImage2 from "../../assets/images/hero2.jpg";
import myHeroImage3 from "../../assets/images/hero3.jpg";
import kuaruLogo from "../../assets/logos/kuaru-logo.png";
import CtaButton from "../shared/CtaButton.astro";
import ByResult from "./ByResult.astro";
import GradiantText from "../shared/GradiantText.astro";

export interface Props {
  className?: string;
}

const { className } = Astro.props;
---

<section id="hero" class={`relative min-h-[100vh] pt-32 lg:pt-36 bg-[#4c5c68] ${className} pb-0`}>
  <Container className={"flex flex-col items-center justify-center min-h-screen"}>
    <div
      class="relative flex flex-col items-center text-center w-full -mt-[25vh]"
      id="hero-content"
    >
      <div class="w-[60vw] sm:w-[50vw] lg:w-[35vw] transition-transform duration-700">
        <Image
          src={kuaruLogo}
          alt="KUARU STUDIO Logo"
          class="w-full h-auto opacity-0 translate-y-6 transition-all ease-out duration-700 glow-pulse-img"
          id="hero-logo"
          data-scrollfade
        />
        </div>
      <div id="hero-text-wrap" data-scrollfade class="flex flex-col items-center justify-center gap-4 text-center opacity-0 translate-y-6 transition-all ease-out duration-700">
         <h1 id="hero-text-logo" data-scrollfade data-text="KUARU STUDIOS" class="relative inline-block text-[clamp(1.75rem,8vw,6rem)] font-bold text-[#f4f4f4] font-work-sans whitespace-nowrap opacity-0 translate-y-4 transition-all ease-out duration-700 glow-pulse-text">
           KUARU STUDIOS
         </h1>
         <Paragraph id="hero-slogan" className="mt-[0vh] font-thin !text-[#a3a3a3] tracking-[0em] md:tracking-[0.1em] text-lg md:text-xl lg:text-xl xl:text-2xl 2xl:text-3xl whitespace-nowrap">
           &nbsp;Rooted in Quality. Elegance in Simplicity.
         </Paragraph>
       </div>
    </div>
  </Container>
  <!-- Explore indicator (fixed) -->
  <div id="hero-explore" class="fixed left-1/2 -translate-x-1/2 bottom-8 flex flex-col items-center justify-center pointer-events-none opacity-0 transition-opacity duration-500 z-30">
    <svg class="w-6 h-6 text-[#f3f4f0] animate-bounce" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </div>
</section>

<script>
  const heroSection = document.getElementById('hero') as HTMLElement | null;
  const heroContent = document.getElementById('hero-content') as HTMLElement | null;
  const exploreIndicator = document.getElementById('hero-explore') as HTMLElement | null;
  const aboutSection = document.getElementById('about-section') as HTMLElement | null;
  
  /* no background color change*/

  document.addEventListener('DOMContentLoaded', () => {
    const heroSection = document.querySelector('#hero') as HTMLElement | null;
    if (!heroSection) return;

    const logoElement = heroSection.querySelector('img') as HTMLImageElement | null;
    if (!logoElement) return;

    const heroHeight = heroSection.offsetHeight;

    /* -------------------------------
       Scroll-fade / slide-up for hero
    --------------------------------*/
    const fadeEls = document.querySelectorAll('#hero [data-scrollfade]');
    if (fadeEls.length) {
      const ioHero = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          const el = entry.target as HTMLElement;
          if (entry.isIntersecting) {
            el.classList.remove('opacity-0', 'translate-y-6');
          } else {
            el.classList.add('opacity-0', 'translate-y-6');
          }
        });
      }, {
        rootMargin: '-25% 0px -25% 0px',
        threshold: 0,
      });
      fadeEls.forEach(el => ioHero.observe(el));
    }

    /* -------------------------------
       Explore indicator delay logic
    --------------------------------*/
    if (exploreIndicator && heroSection) {
      let timerId: number | null = null;

      const resetTimer = () => {
        if (timerId) clearTimeout(timerId);
        timerId = window.setTimeout(() => {
          exploreIndicator.classList.remove('opacity-0');
        }, 3000);
      };

      const onScroll = () => {
        exploreIndicator.classList.add('opacity-0');
        resetTimer();
      };

      const ioExplore = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            resetTimer();
            window.addEventListener('scroll', onScroll);
          } else {
            if (timerId) {
              clearTimeout(timerId);
              timerId = null;
            }
            exploreIndicator.classList.add('opacity-0');
            window.removeEventListener('scroll', onScroll);
          }
        });
      }, { threshold: 0 });

      ioExplore.observe(heroSection);
    }
  });
</script>

<style is:global>
  /* Glow pulse animations (optimized) */
  @keyframes glowOpacity {
    0%,100% { opacity: 0; }
    50%     { opacity: 1; }
  }

  .glow-pulse-text {
    will-change: opacity;
  }

  .glow-pulse-text::after {
    content: attr(data-text);
    position: absolute;
    inset: 0;
    color: #f4f4f4;
    filter: blur(3px);
    opacity: .25;
    animation: glowOpacity 8s ease-in-out infinite;
    pointer-events: none;
  }

  @keyframes imgGlow {
    0%,100% { filter: drop-shadow(0 0 0px #f4f4f4); }
    50%     { filter: drop-shadow(0 0 5px #f4f4f4); }
  }

  .glow-pulse-img {
    animation: imgGlow 8s ease-in-out infinite;
    will-change: filter;
  }
</style>
